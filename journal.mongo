-- По умолчанию MongoDB запускается !!БЕЗ паролей!!
-- По умолчанию MongoDB прослушивает подключения к сокету на порту 27017.
-- Сервер не сможет запуститься, если этот занят

-- запустим mongo.exe

C:\Program Files\MongoDB\Server\5.0\bin>mongo.exe
MongoDB shell version v5.0.8
connecting to: mongodb://127.0.0.1:27017/?compressors=disabled&gssapiServiceName=mongodb
Implicit session: session { "id" : UUID("8d346bbc-fa60-4c57-83e4-32146dd54a32") }
MongoDB server version: 5.0.8
================
Warning: the "mongo" shell has been superseded by "mongosh",
which delivers improved usability and compatibility.The "mongo" shell has been deprecated and will be removed in
an upcoming release.
For installation instructions, see
https://docs.mongodb.com/mongodb-shell/install/
================
Welcome to the MongoDB shell.
For interactive help, type "help".
For more comprehensive documentation, see
        https://docs.mongodb.com/
Questions? Try the MongoDB Developer Community Forums
        https://community.mongodb.com
---
The server generated these startup warnings when booting:
        2022-05-18T16:40:50.224+03:00: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted
---
---
        Enable MongoDB's free cloud-based monitoring service, which will then receive and display
        metrics about your deployment (disk utilization, CPU, operation statistics, etc).

        The monitoring data will be available on a MongoDB website with a unique URL accessible to you
        and anyone you share the URL with. MongoDB may use this information to make product
        improvements and to suggest MongoDB products and deployment options to you.

        To enable free monitoring, run the following command: db.enableFreeMonitoring()
        To permanently disable this reminder, run the following command: db.disableFreeMonitoring()
---
> show dbs
admin   0.000GB
config  0.000GB
local   0.000GB
> use users
switched to db users
> db.createUser({user:"admin", pwd:"12890",roles:["readWrite","dbAdmin"]})
Successfully added user: { "user" : "admin", "roles" : [ "readWrite", "dbAdmin" ] }
> db.users.find()
> db.users.insert({"name": "Tom", "age": 28, languages: ["english", "spanish"]})
WriteResult({ "nInserted" : 1 })
> db.users.find()
{ "_id" : ObjectId("628501e70e12b8f406982a6f"), "name" : "Tom", "age" : 28, "languages" : [ "english", "spanish" ] }
> show dbs
admin   0.000GB
config  0.000GB
local   0.000GB
users   0.000GB
> db.help()
DB methods:
        db.adminCommand(nameOrDocument) - switches to 'admin' db, and runs command [just calls db.runCommand(...)]
        db.aggregate([pipeline], {options}) - performs a collectionless aggregation on this database; returns a cursor
        db.auth(username, password)
        db.commandHelp(name) returns the help for the command
        db.createUser(userDocument)
        db.createView(name, viewOn, [{$operator: {...}}, ...], {viewOptions})
        db.currentOp() displays currently executing operations in the db
        db.dropDatabase(writeConcern)
        db.dropUser(username)
        db.eval() - deprecated
        db.fsyncLock() flush data to disk and lock server for backups
        db.fsyncUnlock() unlocks server following a db.fsyncLock()
        db.getCollection(cname) same as db['cname'] or db.cname
        db.getCollectionInfos([filter]) - returns a list that contains the names and options of the db's collections
        db.getCollectionNames()
        db.getLastError() - just returns the err msg string
        db.getLastErrorObj() - return full status object
        db.getLogComponents()
        db.getMongo() get the server connection object
        db.getMongo().setSecondaryOk() allow queries on a replication secondary server
        db.getName()
        db.getProfilingLevel() - deprecated
        db.getProfilingStatus() - returns if profiling is on and slow threshold
        db.getReplicationInfo()
        db.getSiblingDB(name) get the db at the same server as this one
        db.getWriteConcern() - returns the write concern used for any operations on this db, inherited from server object if set
        db.hostInfo() get details about the server's host
        db.isMaster() check replica primary status
        db.hello() check replica primary status
        db.killOp(opid) kills the current operation in the db
        db.listCommands() lists all the db commands
        db.loadServerScripts() loads all the scripts in db.system.js
        db.logout()
        db.printCollectionStats()
        db.printReplicationInfo()
        db.printShardingStatus()
        db.printSecondaryReplicationInfo()
        db.rotateCertificates(message) - rotates certificates, CRLs, and CA files and logs an optional message
        db.runCommand(cmdObj) run a database command.  if cmdObj is a string, turns it into {cmdObj: 1}
        db.serverStatus()
        db.setLogLevel(level,<component>)
        db.setProfilingLevel(level,slowms) 0=off 1=slow 2=all
        db.setVerboseShell(flag) display extra information in shell output
        db.setWriteConcern(<write concern doc>) - sets the write concern for writes to the db
        db.shutdownServer()
        db.stats()
        db.unsetWriteConcern(<write concern doc>) - unsets the write concern for writes to the db
        db.version() current version of the server
        db.watch() - opens a change stream cursor for a database to report on all  changes to its non-system collections.
> db.users.find()
{ "_id" : ObjectId("628501e70e12b8f406982a6f"), "name" : "Tom", "age" : 28, "languages" : [ "english", "spanish" ] }
> db.users.insert({"company":{"name":"Microsoft","age": 25, languages: ["english",
... "spanish"]}})
WriteResult({ "nInserted" : 1 })
> db.users.find()
{ "_id" : ObjectId("628501e70e12b8f406982a6f"), "name" : "Tom", "age" : 28, "languages" : [ "english", "spanish" ] }
{ "_id" : ObjectId("62851a050e12b8f406982a70"), "company" : { "name" : "Microsoft", "age" : 25, "languages" : [ "english", "spanish" ] } }
> db.users.find({"company.name": "Microsoft"})
{ "_id" : ObjectId("62851a050e12b8f406982a70"), "company" : { "name" : "Microsoft", "age" : 25, "languages" : [ "english", "spanish" ] } }
> db.users.find ({age: {$lt : 30}})
{ "_id" : ObjectId("628501e70e12b8f406982a6f"), "name" : "Tom", "age" : 28, "languages" : [ "english", "spanish" ] }
> db.users.find ({age: {$gt : "30"}})
> db.users.find ({age: {$gt : 30, $lt: 50}})
> db.users.find ({age: {$ne : 22}})
{ "_id" : ObjectId("628501e70e12b8f406982a6f"), "name" : "Tom", "age" : 28, "languages" : [ "english", "spanish" ] }
{ "_id" : ObjectId("62851a050e12b8f406982a70"), "company" : { "name" : "Microsoft", "age" : 25, "languages" : [ "english", "spanish" ] } }
> db.users.find ({age: {$in : [22, 32]}})
> db.users.find ({age: {$nin : [22, 32]}})
{ "_id" : ObjectId("628501e70e12b8f406982a6f"), "name" : "Tom", "age" : 28, "languages" : [ "english", "spanish" ] }
{ "_id" : ObjectId("62851a050e12b8f406982a70"), "company" : { "name" : "Microsoft", "age" : 25, "languages" : [ "english", "spanish" ] } }
> db.users.find ({languages: {$all : [ "english" , "spanish" ]}})
{ "_id" : ObjectId("628501e70e12b8f406982a6f"), "name" : "Tom", "age" : 28, "languages" : [ "english", "spanish" ] }
> db.users.find ({$or : [{name: "Tom"}, {age: 22}]})
{ "_id" : ObjectId("628501e70e12b8f406982a6f"), "name" : "Tom", "age" : 28, "languages" : [ "english", "spanish" ] }
> db.users.find ({languages: {$size:2}})
{ "_id" : ObjectId("628501e70e12b8f406982a6f"), "name" : "Tom", "age" : 28, "languages" : [ "english", "spanish" ] }
> db.users.find ({company: {$exists:true}})
{ "_id" : ObjectId("62851a050e12b8f406982a70"), "company" : { "name" : "Microsoft", "age" : 25, "languages" : [ "english", "spanish" ] } }
> db.users.find ({name: {$regex:"b"}})
> db.users.save({name: "Eugene", age : 29, languages: ["english", "german",
... "spanish"]})
WriteResult({ "nInserted" : 1 })
> db.users.update({name : "Eugene", age: 29}, {$set: {age : 30}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.users.update({name : "Tom"}, {$unset: {salary: 1}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 0 })
> db.users.update({name : "Tom"}, {$unset: {salary: 1, age: 1}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })


-- делаем дамп существующих БД
mongodump --out D:\SRC\repo\SQL\SQL_2\hw_6\dump\
dir D:\SRC\repo\SQL\SQL_2\hw_6\dump\

 Содержимое папки D:\SRC\repo\SQL\SQL_2\hw_6\dump

18.05.2022  19:39    <DIR>          .
18.05.2022  19:39    <DIR>          ..
18.05.2022  19:39    <DIR>          admin -- системная бд
18.05.2022  19:39    <DIR>          users  -- созданная бд
               0 файлов              0 байт